// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package altcha

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAd14901DecodeGithubCom267HAltchaSolver(in *jlexer.Lexer, out *Solution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "algorithm":
			out.Algorithm = string(in.String())
		case "challenge":
			out.Challenge = string(in.String())
		case "number":
			out.Number = int(in.Int())
		case "salt":
			out.Salt = string(in.String())
		case "signature":
			out.Signature = string(in.String())
		case "took":
			out.Took = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd14901EncodeGithubCom267HAltchaSolver(out *jwriter.Writer, in Solution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"algorithm\":"
		out.RawString(prefix[1:])
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"challenge\":"
		out.RawString(prefix)
		out.String(string(in.Challenge))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix)
		out.String(string(in.Salt))
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	{
		const prefix string = ",\"took\":"
		out.RawString(prefix)
		out.Int64(int64(in.Took))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Solution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd14901EncodeGithubCom267HAltchaSolver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Solution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd14901EncodeGithubCom267HAltchaSolver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Solution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd14901DecodeGithubCom267HAltchaSolver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Solution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd14901DecodeGithubCom267HAltchaSolver(l, v)
}
func easyjsonAd14901DecodeGithubCom267HAltchaSolver1(in *jlexer.Lexer, out *Challenge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "algorithm":
			out.Algorithm = string(in.String())
		case "challenge":
			out.Challenge = string(in.String())
		case "maxNumber":
			out.MaxNumber = int(in.Int())
		case "salt":
			out.Salt = string(in.String())
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd14901EncodeGithubCom267HAltchaSolver1(out *jwriter.Writer, in Challenge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"algorithm\":"
		out.RawString(prefix[1:])
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"challenge\":"
		out.RawString(prefix)
		out.String(string(in.Challenge))
	}
	{
		const prefix string = ",\"maxNumber\":"
		out.RawString(prefix)
		out.Int(int(in.MaxNumber))
	}
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix)
		out.String(string(in.Salt))
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Challenge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd14901EncodeGithubCom267HAltchaSolver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Challenge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd14901EncodeGithubCom267HAltchaSolver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Challenge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd14901DecodeGithubCom267HAltchaSolver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Challenge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd14901DecodeGithubCom267HAltchaSolver1(l, v)
}
